<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

    <bean id="Cat" class="com.cats.Cat"/>

    <!-- would scan the classes inside the specified package and create the beans instance
    @Component, @Repository, @Service, @Controller-->
    <context:component-scan base-package="com.cats"/>

    <!--activating annotations in beans already registered in the application context
    context:component-scan can also do the same job,
    but context:component-scan will also scan the packages for registering the beans to application context.
    context:annotation-config will not search for the beans registration,
    this will only activate the already registered beans in the context. -->
    <context:annotation-config/>

    <!--enabling the Spring MVC components with its default configurations-->
    <mvc:annotation-driven/>

    <!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven/>

    <mvc:resources mapping="/resources/**" location="/WEB-INF/classes/static/, /webjars/">
        <!-- to use webjars-locator, cache-control and resource-chain need to be set to true -->
        <mvc:cache-control cache-public="true" max-age="2592000"/>
        <mvc:resource-chain resource-cache="true"/>
    </mvc:resources>
    <!--example resource path: http://localhost:8080/catswebapp/resources/img/cat_upload.jpg-->
    <!-- path without webjars-locator <script src="resources/bootstrap/4.3.1/js/bootstrap.min.js"></script> -->
    <!-- path with webjars-locator  <script src="resources/bootstrap/js/bootstrap.min.js"></script> -->

    <util:properties id="cloud" location="classpath:properties/cloud.properties"/>
    <context:property-placeholder properties-ref="cloud" ignore-unresolvable="true"/>

    <bean id="filterMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="${cloud.max.file.size}"/>
    </bean>

</beans>